const n='# Key commit message abbreviations\n\n코드의 변경사항을 추적하는 것은 소프트웨어 개발의 중요한 부분입니다. Git은 이를 위한 강력한 도구이며, 커밋 메시지는 이 변경사항을 이해하는데 도움을 주는 핵심적인 요소입니다. 이 글에서는 효과적인 Git 커밋 메시지를 작성하기 위한 메시지 약어를 나열하였습니다. 약어는 코드 변경 이력을 보다 명확하게 표현하는 데 도움이 됩니다.\n\n1. **feat**: "feature"의 줄임말로, 새로운 기능이 추가될 때 사용됩니다.\n   ```git\n   git commit -m "feat: 사용자 인증 기능 추가"\n   ```\n2. **fix**: 버그 수정을 의미합니다.\n   ```git\n   git commit -m "fix: 버그 수정"\n   ```\n3. **refactor**: 코드의 재구성을 의미합니다.\n   ```git\n   git commit -m "refactor: 코드 구조 개선"\n   ```\n4. **docs**: "documentation"의 줄임말로, 문서나 주석 등을 추가하거나 업데이트할 때 사용합니다.\n   ```git\n   git commit -m "docs: API 문서 업데이트"\n   ```\n5. **style**: 스타일 관련 변경사항을 의미합니다.\n   ```git\n   git commit -m "style: 코드 포맷팅 적용"\n   ```\n6. **test**: 테스트 관련 변경사항을 의미합니다.\n   ```git\n   git commit -m "test: 새로운 유닛 테스트 추가"\n   ```\n7. **chore**: 일반적인 작업을 의미합니다. 패키지 업데이트, 빌드 스크립트 수정 등이 이에 해당합니다.\n   ```git\n   git commit -m "chore: 패키지 업데이트"\n   ```\n8. **revert**: 이전 커밋을 되돌리는 작업을 의미합니다.\n   ```git\n    git commit -m "revert: 이전 커밋 되돌리기"\n   ```\n9. **merge**: 브랜치를 병합하는 작업을 의미합니다.\n   ```git\n   git commit -m "merge: 브랜치 병합"\n   ```\n10. **release**: 새로운 버전을 릴리즈할 때 사용합니다.\n    ```git\n    git commit -m "release: v1.0.0"\n    ```\n11. **hotfix**: 긴급하게 수정해야 하는 버그를 의미합니다.\n    ```git\n    git commit -m "hotfix: 긴급 버그 수정"\n    ```\n12. **config**: 설정 파일을 수정할 때 사용합니다.\n    ```git\n    git commit -m "config: 설정 파일 수정"\n    ```\n13. **init**: 프로젝트를 초기화할 때 사용합니다.\n    ```git\n    git commit -m "init: 프로젝트 초기화"\n    ```\n14. **rename**: 파일이나 코드의 이름을 변경할 때 사용합니다.\n    ```git\n    git commit -m "rename: 파일 이름 변경"\n    ```\n15. **upgrade**: 버전을 업그레이드할 때 사용합니다.\n    ```git\n    git commit -m "upgrade: 버전 업그레이드"\n    ```\n16. **downgrade**: 버전을 다운그레이드할 때 사용합니다.\n    ```git\n    git commit -m "downgrade: 버전 다운그레이드"\n    ```\n17. **remove**: 파일이나 코드를 삭제할 때 사용합니다.\n    ```git\n    git commit -m "remove: 파일 삭제"\n    ```\n18. **move**: 파일이나 코드를 이동할 때 사용합니다.\n    ```git\n    git commit -m "move: 파일 이동"\n    ```\n19. **optimize**: 코드를 최적화할 때 사용합니다.\n    ```git\n    git commit -m "optimize: 코드 최적화"\n    ```\n20. **add**: 파일이나 코드를 추가할 때 사용합니다.\n    ```git\n      git commit -m "add: 파일 추가"\n    ```\n\n이러한 커밋 메시지 약어들을 사용하면 코드의 변경 이력을 보다 명확하게 표현할 수 있습니다. 이를 통해 다른 개발자들이 변경사항을 빠르게 이해하고, 코드 리뷰나 디버깅을 효율적으로 수행할 수 있습니다.\n';export{n as default};
